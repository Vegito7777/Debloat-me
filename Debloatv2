Function Remove-App-MSI-QN {
    param([String]$appName)

    $appCheck = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall, HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall | 
                Get-ItemProperty | 
                Where-Object {$_.DisplayName -eq $appName } | 
                Select-Object -Property DisplayName,UninstallString

    if($appCheck -ne $null){
        Write-host "Uninstalling $($appCheck.DisplayName)"
        $uninst = $appCheck.UninstallString + " /qn /norestart"
        cmd /c $uninst
    }
    else{
        Write-Host "$appName is not installed on this computer"
    }
}

Function Remove-App-EXE-SILENT {
    param([String]$appName)

    $appCheck = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall, HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall | 
                Get-ItemProperty | 
                Where-Object {$_.DisplayName -eq $appName } | 
                Select-Object -Property DisplayName,UninstallString

    if($appCheck -ne $null){
        Write-host "Uninstalling $($appCheck.DisplayName)"
        $uninst = $appCheck.UninstallString + " -silent"
        cmd /c $uninst
    }
    else{
        Write-Host "$appName is not installed on this computer"
    }
}

Function Remove-App-MSI_EXE-Quiet {
    param([String]$appName)

    $appCheck = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall, HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall | 
                Get-ItemProperty | 
                Where-Object {$_.DisplayName -eq $appName } | 
                Select-Object -Property DisplayName,UninstallString

    if($appCheck -ne $null){
        Write-host "Uninstalling $($appCheck.DisplayName)"
        $uninst = $appCheck.UninstallString[1] +  " /qn /restart"
        cmd /c $uninst
    }
    else{
        Write-Host "$appName is not installed on this computer"
    }
}

Function Remove-App-MSI_EXE-S {
    param([String]$appName)

    $appCheck = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall, HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall | 
                Get-ItemProperty | 
                Where-Object {$_.DisplayName -eq $appName } | 
                Select-Object -Property DisplayName,UninstallString

    if($appCheck -ne $null){
        Write-host "Uninstalling $($appCheck.DisplayName)"
        $uninst = $appCheck.UninstallString[1] +  " /S"
        cmd /c $uninst
    }
    else{
        Write-Host "$appName is not installed on this computer"
    }
}

Function Remove-App-MSI-I-QN {
    param([String]$appName)

    $appCheck = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall, HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall | 
                Get-ItemProperty | 
                Where-Object {$_.DisplayName -eq $appName } | 
                Select-Object -Property DisplayName,UninstallString

    if($appCheck -ne $null){
        Write-host "Uninstalling $($appCheck.DisplayName)"
        $uninst = $appCheck.UninstallString.Replace("/I","/X") + " /qn /norestart"
        cmd /c $uninst
    }
    else{
        Write-Host "$appName is not installed on this computer"
    }
}

Function Remove-App {
    param([String]$appName)

    $app = Get-AppxPackage -AllUsers $appName
    if($app -ne $null){
        $packageFullName = $app.PackageFullName
        Write-Host "Uninstalling $appName"
        Remove-AppxPackage -package $packageFullName -AllUsers
        $provApp = Get-AppxProvisionedPackage -Online 
        $proPackageFullName = (Get-AppxProvisionedPackage -Online | where {$_.Displayname -eq $appName}).DisplayName
        if($proPackageFullName -ne $null){
            Write-Host "Uninstalling provisioned $appName"
            Remove-AppxProvisionedPackage -online -packagename $proPackageFullName -AllUsers
        }
    }
    else{
        Write-Host "$appName is not installed on this computer"
    }
}

Function Remove-M365 {
    param([String]$appName)

    $uninstall = (Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Where {$_.DisplayName -like $appName} | Select UninstallString)
    if($uninstall -ne $null){
        Write-Host "Uninstalling $appName"
        $uninstall = $uninstall.UninstallString + " DisplayLevel=False"
        cmd /c $uninstall
    }
    else{
        Write-Host "$appName is not installed on this computer"
    }
}

Function Check-UninstallString {
    param([String]$appName)

    $appCheck = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall, HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall | 
                Get-ItemProperty | 
                Where-Object {$_.DisplayName -eq $appName } | 
                Select-Object -Property DisplayName,UninstallString
    if($appCheck -ne $null){
        Write-host $appCheck.DisplayName $appCheck.UninstallString
    }
    else{
        Write-Host "$appName is not installed on this computer"
    }
}

Function Remove-App-EXE-S-QUOTES {
    param([String]$appName)

    $appCheck = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall, HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall | 
                Get-ItemProperty | 
                Where-Object {$_.DisplayName -eq $appName } | 
                Select-Object -Property DisplayName,UninstallString
    if($appCheck -ne $null){
        Write-host "Uninstalling $($appCheck.DisplayName)"
        $uninst = "`"" + $appCheck.UninstallString + "`"" + " /S"
        cmd /c $uninst
    }
    else{
        Write-Host "$appName is not installed on this computer"
    }
}

Remove-App-MSI-QN "Dell SupportAssist"                                             # Working
Remove-App-MSI-QN "Dell Digital Delivery Services"                                 # Working
Remove-App-EXE-SILENT "Dell Optimizer Core"                                        # Working
Remove-App-MSI_EXE-S "Dell SupportAssist OS Recovery Plugin for Dell Update"       # Working
Remove-App-MSI_EXE-S "Dell SupportAssist Remediation"                              # Working
Remove-App-EXE-S-QUOTES "Dell Display Manager 2.1"                                 # Working
Remove-App-EXE-S-QUOTES "Dell Peripheral Manager"                                  # Working
Remove-App-MSI-I-QN "Dell Core Services"                                           # Working
Remove-App-MSI-I-QN "Dell Trusted Device Agent"                                    # Working
Remove-App-MSI-I-QN "Dell Optimizer"                                               # Working
Remove-App "Microsoft.GamingApp"                                                   # Working
Remove-App "Microsoft.MicrosoftOfficeHub"                                          # Working
Remove-App "DellInc.DellDigitalDelivery"                                           # Working 
Remove-App "Microsoft.GetHelp"                                                     # Working
Remove-App "Microsoft.Getstarted"                                                  # Working
Remove-App "Microsoft.Messaging"                                                   # Working
Remove-App "Microsoft.MicrosoftSolitaireCollection"                                # Working
Remove-App "Microsoft.OneConnect"                                                  # Working
Remove-App "Microsoft.SkypeApp"                                                    # Working
Remove-App "Microsoft.Wallet"                                                      # Working
Remove-App "microsoft.windowscommunicationsapps"                                   # Working
Remove-App "Microsoft.WindowsFeedbackHub"                                          # Working
Remove-App "Microsoft.YourPhone"                                                   # Working
Remove-App "ZuneMusic"                                                             # Working        
Remove-M365 "Microsoft 365 - fr-fr"                                                # Working
Remove-M365 "Microsoft 365 - es-es"                                                # Working                                            
Remove-M365 "Microsoft 365 - pt-br"                                                # Working
Remove-M365 "Microsoft OneNote - fr-fr"                                            # Working
Remove-M365 "Microsoft OneNote - es-es"                                            # Working
Remove-M365 "Microsoft OneNote - pt-br"                                            # Working
Check-UninstallString "DELLOSD"
Remove-App "Microsoft.Xbox.TCUI"    # Working
Remove-App "Microsoft.XboxApp"   # Working 
Remove-App "Microsoft.XboxGameOverlay"   # Working
Remove-App "Microsoft.XboxIdentityProvider"    # Working
Remove-App "Microsoft.XboxSpeechToTextOverlay"     # Working

Write-Host -ForegroundColor Yellow "Disabling Xbox features..."
Set-ItemProperty -Path "HKCU:\Software\Microsoft\GameBar" -Name "AutoGameModeEnabled" -Type DWord -Value 0
Set-ItemProperty -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type DWord -Value 0

If (!(Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\GameDVR")) {
    New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\GameDVR" | Out-Null
}

Write-Host -ForegroundColor Yellow "Setting Control Panel view to small icons..."
If (!(Test-Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel")) {
    New-Item -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel" | Out-Null
}
Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel" -Name "StartupPage" -Type DWord -Value 1
Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel" -Name "AllItemsIconView" -Type DWord -Value 1

# Uninstalling Apps & Features 

$Bloatware = @(

    # Add sponsored/featured apps to remove in the "*AppName*" format
    "*EclipseManager*"
    "*AdobeSystemsIncorporated.AdobePhotoshopExpress*"
    "*Duolingo-LearnLanguagesforFree*"
"*EclipseManager*"
    "*AdobeSystemsIncorporated.AdobePhotoshopExpress*"
        "*Duolingo-LearnLanguagesforFree*"
        "*PandoraMediaInc*"
        "*CandyCrush*"
        "*BubbleWitch3Saga*"
        "*Wunderlist*"
        "*Flipboard*"
        "*Twitter*"
        "*Facebook*"
        "*Spotify*"
        "*Minecraft*"
        "*Royal Revolt*"
        "*Sway*"
        "*Speed Test*"
        "*Dolby*"
	"*Paint*"
    "*PowerAutomate*"
    "*QuickAssist*"
    "*MaxxAudioPro*"
    "*Copilot*"
    "Clipchamp*"
    "*ActiproSoftware*"
	"*Alexa*"
	"*AdobePhotoshopExpress*"
	"*Advertising*"
             "*ASUSPCAssistant*"
	"*AutodeskSketchBook*"
	"*BingNews*"
	"*BingSports*"
	"*BingTranslator*"
	"*BingWeather*"
	"*BubbleWitch3Saga*"
	"*CandyCrush*"
	"*Casino*"
	"*COOKINGFEVER*"
	"*CyberLink*"
	"*Disney*"
	"*Dolby*"
	"*DrawboardPDF*"
	"*Duolingo*"
	"*ElevocTechnology*"
	"*EclipseManager*"
	"*Facebook*"
	"*FarmVille*"
	"*Fitbit*"
	"*flaregames*"
	"*Flipboard*"
	"*GamingApp*"
	"*GamingServices*"
	"*GetHelp*"
	"*Getstarted*"
	"*HPPrinter*"
	"*iHeartRadio*"
	"*Instagram*"
	"*Lenovo*"
	"*Lens*"
	"*LinkedInforWindows*"
	"*MarchofEmpires*"
	"*McAfee*"
	"*Messaging*"
	"*MirametrixInc*"
	"*Microsoft3DViewer*"
	"*MicrosoftOfficeHub*"
	"*MicrosoftSolitaireCollection*"
	"*Minecraft*"
	"*MixedReality*"
	"*Netflix*"
	"*News*"
	"*PandoraMediaInc*"
	"*PhototasticCollage*"
	"*PicsArt-PhotoStudio*"
	"*Plex*"
	"*PolarrPhotoEditor*"
	"*PPIProjection*"
	"*Print3D*"
	"*Royal Revolt*"
	"*ScreenSketch*"
	"*Shazam*"
	"*SkypeApp*"
	"*SlingTV*"
	"*Spotify*"
	"*StickyNotes*"
	"*Teams*"
	"*TheNewYorkTimes*"
	"*TuneIn*"
	"*Twitter*"
	"*Wallet*"
	"*WebExperience*" 
	"*Whiteboard*"
	"*WindowsAlarms*"
	"*windowscommunicationsapps*"
	"*WindowsFeedbackHub*"
	"*WindowsMaps*"
	"*WindowsSoundRecorder*"
	"*WinZipComputing*"
            “*Solitaire*”
           "*Xbox.TCUI*"
	"*XboxApp*"
	"*XboxGameOverlay*"
	"*XboxGamingOverlay*"
	"*XboxIdentityProvider*"
	"*XboxSpeechToTextOverlay*"
          "*Movies&TV*"

    # Add more apps here as needed
)

foreach ($App in $Bloatware) {

    Write-Host "Searching and Removing Package $App for All Users"
    Get-AppxPackage -Name $App -AllUsers | Remove-AppxPackage -AllUsers -ErrorAction SilentlyContinue -Verbose
                            
    Write-Host "Searching and Removing Package $App for Current User"
    Get-AppxPackage -Name $App | Remove-AppxPackage -ErrorAction SilentlyContinue -Verbose

    Write-Host "Searching and Removing Package $App for Provision Package"
    Get-AppxProvisionedPackage -Online | Where-Object DisplayName -Like $App | Remove-AppxProvisionedPackage -Online -ErrorAction SilentlyContinue -Verbose
}

Get-AppxPackage *copilot* | Remove-AppxPackage 
Get-AppxPackage -AllUsers | Where-Object { $_.Name -Like '*copilot*' } | Remove-AppxPackage



Get-AppxPackage *clipchamp* | Remove-AppxPackage
 Get-AppxPackage -AllUsers | Where-Object { $_.Name -Like '*clipchamp*' } | Remove-AppxPackage


Get-appxpackage *Microsoft.ToDo* | Remove-AppxPackage
Get-AppxPackage -AllUsers | Where-Object { $_.Name -Like '*Microsoft.ToDo*' } | Remove-AppxPackage


Get-AppxPackage -AllUsers | Where-Object {$_.Name -Like '*OutlookForWindows*'} | Remove-AppxPackage

Get-AppxPackage Microsoft.ZuneVideo | Remove-AppxPackage

Get-AppxPackage -AllUsers | Where-Object { $_.Name -Like 'Microsoft.ZuneVideo' } | Remove-AppxPackage

Write-Host "Waiting for Jobs to Complete"

# Check current execution policy
$originalExecutionPolicy = Get-ExecutionPolicy
# Temporarily change execution policy to allow script execution
Set-ExecutionPolicy RemoteSigned -Scope Process -Force
# Check if PSWindowsUpdate module is installed, if not, install it
if (-not (Get-Module -Name PSWindowsUpdate -ListAvailable)) {
    Write-Host "PSWindowsUpdate module not found. Installing..."
    Install-Module -Name PSWindowsUpdate -Force -AcceptLicense
}
# Import the PSWindowsUpdate module
Import-Module -Name PSWindowsUpdate -Force
# Check for updates
$updates = Get-WindowsUpdate
# Check if any updates are available
if ($updates.Count -gt 0) {
    # Install all updates
    foreach ($update in $updates) {
        Write-Host "Installing update $($update.Title)..."
        Install-WindowsUpdate -KBArticleID $update.KBArticleID -AcceptAll -Confirm:$false -Verbose
    }
}
else {
    Write-Host "No updates available."
}
# Revert execution policy back to its original state
Set-ExecutionPolicy $originalExecutionPolicy -Scope Process -Force

function Invoke-PreinstallChecks {
    # Check PC manufacturer
    if ((Get-WmiObject win32_bios).Manufacturer -notlike '*Dell*') {
        Write-Output 'Not a Dell system. Aborting...'
        exit 0
    }
    # Check for incompatible products
    $RegPaths = @('HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall', 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall')
    $IncompatibleApps = Get-ChildItem -Path $RegPaths | Get-ItemProperty | Where-Object { $_.DisplayName -like 'Dell Update*' } | Select-Object
    foreach ($IncompatibleApp in $IncompatibleApps) {
        Write-Output "Attempting to remove program: [$($IncompatibleApp.DisplayName)]"
        try {
            $Null = cmd /c $IncompatibleApp.UninstallString /quiet
            Write-Output "Successfully removed package: [$($IncompatibleApp.DisplayName)]"
        }
        catch { 
            Write-Warning "Failed to remove provisioned package: [$($IncompatibleApp.DisplayName)]"
            Write-Warning $_
            exit 1
        }
    }
}

function Get-DownloadURL {
    $DellURL = 'https://www.dell.com/support/kbdoc/en-us/000177325/dell-command-update'
    $Headers = @{ 'accept' = 'text/html' }
    [String]$DellWebPage = Invoke-RestMethod -UseBasicParsing -Uri $DellURL -Headers $Headers
    if ($DellWebPage -match '(https://www\.dell\.com.*driverId=[a-zA-Z0-9]*)') { 
        $DownloadPage = Invoke-RestMethod -UseBasicParsing -Uri $Matches[1] -Headers $Headers
        if ($DownloadPage -match '(https://dl\.dell\.com.*Dell-Command-Update.*\.EXE)') { $Matches[1] }
    }
}

function Install-DCU {
    $DownloadURL = Get-DownloadURL
    $Installer = "$env:temp\dcu-setup.exe"
    $Version = $DownloadURL | Select-String '[0-9]*\.[0-9]*\.[0-9]*' | ForEach-Object { $_.Matches.Value }
    $AppName = 'Dell Command | Update for Windows Universal'
    $App = Get-ChildItem -Path $RegPaths | Get-ItemProperty | Where-Object { $_.DisplayName -like $AppName } | Select-Object
    if ($App.DisplayVersion -ne $Version) {
        Write-Output "Installing Dell Command Update: [$Version]"
        try {
            Invoke-WebRequest -Uri $DownloadURL -OutFile $Installer -UserAgent ([Microsoft.PowerShell.Commands.PSUserAgent]::Chrome)
            cmd /c $Installer /s
        }
        catch { 
            Write-Warning 'Unable to install Dell Command Update.'
            Write-Warning $_
            exit 1
        }
    }
}

function Invoke-DCU {
    # Check for DCU CLI
    $DCU = (Resolve-Path "$env:SystemDrive\Program Files*\Dell\CommandUpdate\dcu-cli.exe").Path
    if (!$DCU) {
        Write-Warning 'Dell Command Update CLI was not detected.'
        exit 1
    }
    try {
        cmd /c "$DCU" /configure -updatesNotification=disable -userConsent=disable -scheduleAuto -silent
        cmd /c "$DCU" /scan -silent
        cmd /c "$DCU" /applyUpdates -autoSuspendBitLocker=enable -reboot=disable
    }
    catch {
        Write-Warning 'Unable to apply updates using the dcu-cli.'
        Write-Warning $_
        exit 1
    }
}

# Set PowerShell preferences
Set-Location -Path $env:SystemRoot
$ProgressPreference = 'SilentlyContinue'
$ErrorActionPreference = 'Stop'
if ([Net.ServicePointManager]::SecurityProtocol -notcontains 'Tls12' -and [Net.ServicePointManager]::SecurityProtocol -notcontains 'Tls13') {
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
}

Invoke-PreinstallChecks
Install-DCU
Invoke-DCU

$CheckADCReg = Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | where {$_.DisplayName -like "Adobe Acrobat Reader DC*"}
If ($CheckADCReg -eq $null) {
    $Installdir = "c:\temp\install_adobe"
    New-Item -Path $Installdir  -ItemType directory

    $source = "ftp://ftp.adobe.com/pub/adobe/reader/win/AcrobatDC/2001320064/AcroRdrDC2001320064_en_US.exe"
    $destination = "$Installdir\AcroRdrDC2001320064_en_US.exe"
    Invoke-WebRequest $source -OutFile $destination

    Start-Process -FilePath "$Installdir\AcroRdrDC2001320064_en_US.exe" -ArgumentList "/sAll /rs /rps /msi /norestart /quiet EULA_ACCEPT=YES"

    Start-Sleep -Seconds 240

    Remove-Item -Path "$Installdir\AcroRdrDC*"
}

$LocalTempDir = $env:TEMP; $ChromeInstaller = "ChromeInstaller.exe";
(new-object    System.Net.WebClient).DownloadFile('http://dl.google.com/chrome/install/latest/chrome_installer.exe', "$LocalTempDir\$ChromeInstaller"); & "$LocalTempDir\$ChromeInstaller" /silent /install;
$Process2Monitor =  "ChromeInstaller"; Do { 
    $ProcessesFound = Get-Process | ?{
        $Process2Monitor -contains $_.Name} | Select-Object -ExpandProperty Name; If ($ProcessesFound)
{ "Still running: $($ProcessesFound -join ', ')" | Write-Host; Start-Sleep -Seconds 2 }
else
{ rm "$LocalTempDir\$ChromeInstaller" -ErrorAction SilentlyContinue -Verbose } } Until (!$ProcessesFound)

Shutdown.exe -r -t 90
Write-Host
Write-Host -ForegroundColor Yellow "System will restart in 90 seconds. To abort, send command: Shutdown.exe -a "
